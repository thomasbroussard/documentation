h1. Configuration de Tomcat en accès sécurisé


Tomcat est un serveur d'applications Java qui permet d'exécuter des applications WEB écrites en Java.
Cette partie indique comment configurer Tomcat en mode HTTPS pour sécuriser les échanges entre le navigateur et le serveur


h2. Démarrage rapide

Afin de pouvoir configurer une connexion HTTPS rapidement, il faut suivre les deux étapes suivantes.

bq. Il est à noter que l'utilisation de cette approche en production est fortement déconseillée. Cette configuration rapide doit être réservée aux environnements de test


h3. Génération d'un magasin de certificat contenant un certificat autosigné 

Depuis l'invite en ligne de commande (démarrée en mode administrateur), tapez:

bc. %JAVA_HOME%\bin\keytool" -genkey -alias tomcat -keyalg RSA -keystore C:\path\to\my\tomcat.keystore

Il faut remplacer le chemin @\path\to\my\tomcat.keystore@ par un chemin accessible par la suite.
Il faut ensuite répondre à l'ensemble des questions posées par l'utilitaire, ce dernier génère le magasin directement au chemin indiqué. 
Il faut également bien noter le mot de passe utilisé, il sera à renseigner dans l'étape suivante

!images/installation.tomcat.ssl.create-self-signed-jks.png(déroulement création magasin de certificat)!  


h3.  Configuration du connecteur https  

Dans le fichier @$TOMCAT-INSTALL-ROOT\conf\server.xml@ rechercher la ligne commentée:

bc. <!--
<Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol"
    maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
    clientAuth="false" sslProtocol="TLS" /> 
-->

Il faut la décommenter et rajouter les attributs 
@keystoreFile="C:\path\to\my\tomcat.keystoretomcat.keystore"@ et @keystorePass="changeit"@

bc. <Connector port="8443" 
        protocol="org.apache.coyote.http11.Http11Protocol"
        maxThreads="150" 
        SSLEnabled="true" 
        scheme="https" 
        secure="true"
        clientAuth="false" 
        sslProtocol="TLS"
        keystoreFile="C:\path\to\my\tomcat.keystore" 
        keystorePass="changeit" />
   
Changer la valeur **changeit** par le mot de passe renseigné dans l'étape précédente.

Si l'on veut restreindre l'accès à l'application en forçant le port sécurisé, il est conseillé de désactiver l'écoute sur le port 8080.
Pour ce faire, chercher la ligne

bc. <Connector port="8080" protocol="HTTP/1.1" 
        connectionTimeout="20000"
        redirectPort="8443" />

et la commenter.
Au redémarrage du serveur, l'accès à l'application ne pourra se faire que sur le port 8443.

h3. Tests

Redémarrer le serveur et accéder à l'application sur le port 8443. Le certificat étant autosigné, il n'est pas possible d'éviter l'exception de sécurité.

p(float-left). Commentaire de l'image dans un texte ininterrompu

bc.     @startuml
    (*)  --> "check input"
    If "input is verbose" then
    --> [Yes] "turn on verbosity"
    --> "run command"
    else
    --> "run command"
    Endif
    -->(*)
    @enduml

??Ceci est un exemple de texte "à côté"??



bc..  @startuml
title Servlet Container

(*) --> "ClickServlet.handleRequest()"
--> "new Page"

if "Page.onSecurityCheck" then
  ->[true] "Page.onInit()"
  
  if "isForward?" then
   ->[no] "Process controls"
   
   if "continue processing?" then
     -->[yes] ===RENDERING===
   else
     -->[no] ===REDIRECT_CHECK===
   endif
   
  else
   -->[yes] ===RENDERING===
  endif
  
  if "is Post?" then
    -->[yes] "Page.onPost()"
    --> "Page.onRender()" as render
    --> ===REDIRECT_CHECK===
  else
    -->[no] "Page.onGet()"
    --> render
  endif
  
else
  -->[false] ===REDIRECT_CHECK===
endif

if "Do redirect?" then
 ->[yes] "redirect request"
 --> ==BEFORE_DESTROY===
else
 if "Do Forward?" then
  -left->[yes] "Forward request"
  --> ==BEFORE_DESTROY===
 else
  -right->[no] "Render page template"
  --> ==BEFORE_DESTROY===
 endif
endif

--> "Page.onDestroy()"
-->(*)

@enduml

p. 
